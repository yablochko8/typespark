#!/bin/bash

echo "
 _______                 _____                  _    
|__   __|               / ____|                | |   
   | |_   _ _ __   ___ | (___  _ __   __ _ _ __| | __
   | | | | | '_ \ / _ \ \___ \| '_ \ / _\` | '__| |/ /
   | | |_| | |_) |  __/ ____) | |_) | (_| | |  |   < 
   |_|\__, | .__/ \___||_____/| .__/ \__,_|_|  |_|\_\\
       __/ | |                | |                    
      |___/|_|                |_|                    
"
echo "This script will bring to life a new TypeScript project."
echo ""
echo "Project will contain:"
echo "- frontend app, created with Vite template"
echo "- server using Express (optional)"
echo "- database setup using Prisma & Postgres (optional)"
echo ""
echo "Project will appear in a new folder with your app name."
echo "Currently only works on Mac."
echo ""

read -p "Give the new app a name: " APP_NAME_INPUT

# Transform app name to sanitized-snake-case
APP_NAME=$(echo "$APP_NAME_INPUT" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')

if [ "$APP_NAME" != "$APP_NAME_INPUT" ]; then
    echo "Name sanitized to: $APP_NAME"
fi

# Check if directory exists, if so, ask user if they want to overwrite
if [ -d "$APP_NAME" ]; then
    read -p "Directory $APP_NAME already exists. Do you want to overwrite it? (y/N): " OVERWRITE
    if [[ $OVERWRITE =~ ^[Yy]$ ]]; then
        rm -rf "$APP_NAME"
    else
        echo "Exiting. Please choose a different app name."
        exit 1
    fi
fi

# Make sure the app name is not empty
if [ -z "$APP_NAME" ]; then
    echo "App name cannot be empty."
    exit 1
fi

# Function to check if response is affirmative or empty
# (this means all responses are Yes by default)
is_affirmative() {
    [[ "$1" =~ ^[Yy]$ ]] || [[ -z "$1" ]]
}

# Get user responses, and set booleans based on responses
read -p "Do you want to use Tailwind for styling? (Y/n): " ADD_TAILWIND_RESPONSE
ADD_TAILWIND=$(is_affirmative "$ADD_TAILWIND_RESPONSE" && echo true || echo false)

read -p "Do you want to add an Express server? (Y/n): " ADD_EXPRESS_RESPONSE
ADD_EXPRESS=$(is_affirmative "$ADD_EXPRESS_RESPONSE" && echo true || echo false)

# Only offer a database if user has said yes to a server
if $ADD_EXPRESS; then
  read -p "Do you need a PostgreSQL database? (Y/n): " ADD_POSTGRES_RESPONSE
  ADD_POSTGRES=$(is_affirmative "$ADD_POSTGRES_RESPONSE" && echo true || echo false)
else
  ADD_POSTGRES=false
fi

# read -p "Do you to add Vitest for test coverage? (Y/n): " ADD_VITEST_RESPONSE
# ADD_VITEST=$(is_affirmative "$ADD_VITEST_RESPONSE" && echo true || echo false)
# temporary override
ADD_VITEST=false

# Define the path to the boilerplate files
BOILERPLATE_PATH="$(dirname "$0")/boilerplates"

echo "Building app with:
ADD_TAILWIND = $ADD_TAILWIND
ADD_EXPRESS = $ADD_EXPRESS
ADD_POSTGRES = $ADD_POSTGRES
ADD_VITEST = $ADD_VITEST
"

# Create the app folder and jump into it
mkdir $APP_NAME
cd $APP_NAME

# Define the full path of the project folder and the frontend (which may be the same)
PROJECT_FOLDER=$(pwd)

# If there is going to be a server as well, we want frontend in its own /frontend folder
# Otherwise we want it at the top level of the project
if $ADD_EXPRESS; then
  mkdir frontend
  cd frontend
  FRONTEND_FOLDER=$(pwd)
else
  FRONTEND_FOLDER=$PROJECT_FOLDER
fi



#######################################################################
# CREATE THE FRONTEND APP
#######################################################################

cd $FRONTEND_FOLDER

npm create vite@latest . -- --template react-swc-ts
echo "Vite creation completed in $FRONTEND_FOLDER. Proceeding to next stage..."

npm install
echo "npm install completed. Proceeding to next stage..."

npm init -y

if $ADD_TAILWIND; then
  # These track steps here https://tailwindcss.com/docs/guides/vite as of 2024-07-24
  npm i tailwindcss @tailwindcss/vite
  cp $BOILERPLATE_PATH/boilerplate.vite.config.ts ./vite.config.ts

# The sed command (to prepend text to a file) is finecky. This only works on Mac.
  sed -i '' '1i\
@import "tailwindcss";\
' src/index.css

  echo "Tailwind CSS setup completed."
else
  echo "Tailwind CSS setup skipped."
fi

cd $PROJECT_FOLDER

# Give the project a good gitignore and blank readme at top level
# Leaving this until after Vite installation to avoid installation clashes
cp $BOILERPLATE_PATH/boilerplate.dotgitignore ./.gitignore
cp $BOILERPLATE_PATH/boilerplate.README.md ./README.md

# PWD at end of a loop like this should always be $PROJECT_FOLDER
# (i.e. STARTING-FOLDER/$APP_NAME)



#######################################################################
# CREATE THE SERVER AND DATABASE
#######################################################################

# Add an express server if requested
if $ADD_EXPRESS; then
  mkdir server
  cd server
    npm init -y
    npm install express cors
    npm i --save-dev @types/express @types/cors
    echo "Express server setup completed in the 'server' directory."
    cp $BOILERPLATE_PATH/boilerplate.server.ts ./server.ts
    echo "Boilerplate server file copied to '$APP_NAME/server/server.ts'."

  cd ..
  cp $BOILERPLATE_PATH/boilerplate.App.tsx frontend/src/App.tsx
  echo "Boilerplate client file updated with server routes in '$APP_NAME/frontend/src/App.tsx'."
else
  echo "Express server setup skipped."
fi

# Add a database if requested
if $ADD_POSTGRES; then
  cd server
    # Add docker compose template
    docker compose down
    cp $BOILERPLATE_PATH/boilerplate.docker-compose.yml ./docker-compose.yml
    echo "Boilerplate Docker yml files added."

    # Add Prisma and schema boilerplates
    npm install prisma --save-dev
    npx prisma init
    cp $BOILERPLATE_PATH/boilerplate.dotenv ./.env
    cp $BOILERPLATE_PATH/boilerplate.dotenv.test ./.env.test
    cp $BOILERPLATE_PATH/boilerplate.schema.prisma ./prisma/schema.prisma

    # Migrate schema and fire up in Docker. Keep this verbose it has caused hiccups in the past. 
    echo "============ running prisma migrate dev ============"
    npx prisma migrate dev --name initial-setup --force
    echo "============ running docker compose up in detached mode ============"
    docker compose up -d
  cd ..

else
  echo "Postgres setup skipped."
fi



#######################################################################
# ADD A TEST SUITE - CURRENTLY NOT USED
#######################################################################

# Add a test suite if requested
# BROKEN RIGHT NOW AND THUS NOT CALLED
if $ADD_VITEST; then
  npm install -D vitest

  if $ADD_POSTGRES; then
  npm install dotenv
  cp $BOILERPLATE_PATH/boilerplate.docker-compose.test.yml ./docker-compose.test.yml
  cp $BOILERPLATE_PATH/boilerplate.dotenv.test ./.env.test
  npm pkg set scripts.test:env="npx dotenv -e .env.test vitest"
  npm pkg set scripts.test:server:up="pm2 start 'bun server/server.ts' --name testserver"
  npm pkg set scripts.test:server:down="pm2 delete testserver"
  npm pkg set scripts.test:prisma:migrate="npx prisma migrate dev --name initial-setup --force"
  npm pkg set scripts.test:docker:up="docker compose -f docker-compose.test.yml up -d"
  npm pkg set scripts.test:docker:down="docker compose -f docker-compose.test.yml down"
  npm pkg set scripts.test:run="vitest run"
  npm pkg set scripts.test-all="npm run test:docker:up && npx dotenv-cli -e .env.test -- npm run test:prisma:migrate && npx dotenv-cli -e .env.test -- npm run test:server:up && npx dotenv-cli -e .env.test -- npm run test:run; npm run test:server:down && npm run test:docker:down"

  fi

else
  echo "Vitest setup skipped."
fi


#######################################################################
# SCRIPTS AND INITIATION
#######################################################################

# Define the commands to run the frontend and server
# FOR CONSIDERATION: This may break some .env handling, unless it all
# lives at the very top, which seems wrong.
if $ADD_EXPRESS; then
  RUN_FRONTEND="npm --prefix frontend run dev"
  RUN_SERVER="cd server && bun --watch server.ts && cd .."
  RUN_FRONTEND_PM2="pm2 start '$RUN_FRONTEND' --name devclient"
  RUN_SERVER_PM2="pm2 start '$RUN_SERVER' --name devserver"
  RUN_ALL="$RUN_FRONTEND_PM2 && $RUN_SERVER_PM2"
  if $ADD_POSTGRES; then
    RUN_DB_STUDIO="cd server && npx --prefix ./server prisma studio --schema ./prisma/schema.prisma && cd .."
    RUN_DB_PM2="pm2 start '$RUN_DB_STUDIO' --name prismastudio"
    RUN_ALL="$RUN_ALL && $RUN_DB_PM2"
  fi
  RUN_ALL="pm2 delete all || true && $RUN_ALL && pm2 logs"
else
  RUN_FRONTEND="npm run dev"
  RUN_ALL=$RUN_FRONTEND
fi

# Define colors for console output
BOLD='\033[1m'
GREEN='\033[0;32m'
CYAN_BOLD='\033[1;36m'
MAGENTA_BOLD='\033[1;35m'
NORMAL='\033[0m' # No Color

# Function to echo to both console and README
# Use -e to interpret escape sequences for console
echo_record_standard() {
    echo -e "$1"
    echo "$1" >> README.md
}

echo_record_command() {
  echo -e "${CYAN_BOLD}$1${NORMAL}"
  echo "\`$1\`" >> README.md
}

echo_record_primary() {
  echo -e "${MAGENTA_BOLD}$1${NORMAL}"
  echo "\`$1\`" >> README.md
}

# Share commands with the user & README
echo ""
echo -e "${BOLD}Project creation complete.${NORMAL}"
echo "These scripts should be run from the project's root directory."
echo_record_standard ""
echo_record_standard "------------------------"
echo_record_standard ""

if $ADD_EXPRESS; then
  echo_record_standard "To fire up your frontend, run:"
  echo_record_command "$RUN_FRONTEND"
  echo_record_standard ""

  echo_record_standard "To fire up your server, run:"
  echo_record_command "$RUN_SERVER"
  echo_record_standard ""
fi

if $ADD_POSTGRES; then
  echo_record_standard "To fire up your database, run:"
  echo_record_command "$RUN_DB_STUDIO"
  echo_record_standard ""
fi

echo_record_standard "The command for firing up everything is:"
echo_record_primary "$RUN_ALL"
echo_record_standard ""


echo "These scripts are saved in the project's README.md"
echo -ne "${GREEN}Typespark process complete! Would you like to fire everything up now? (Y/n): ${NORMAL}"
read FIRST_OPEN_RESPONSE
FIRST_OPEN=$(is_affirmative "$FIRST_OPEN_RESPONSE" && echo true || echo false)

if $FIRST_OPEN; then
  # Open the project in VSCode
  code .
  # Run the command the fires up everything
  eval $RUN_ALL
fi



# # Auto-browser open removed because of port confusion
# # Would love to get this back in if I can determine / hardcode the port number
# # Wait half a second and then fire up the browser
# sleep .5
# open http://localhost:5173/